% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/print.rgcca.R, R/print.cval.r,
%   R/print.rgcca_permutation.R, R/print.rgcca_bootstrap.r,
%   R/print.rgcca_stability.R
\name{print.rgcca}
\alias{print.rgcca}
\alias{print.rgcca_cv}
\alias{print.rgcca_permutation}
\alias{print.rgcca_bootstrap}
\alias{print.rgcca_stability}
\title{Print a fitted object from the RGCCA package}
\usage{
\method{print}{rgcca}(x, ...)

\method{print}{rgcca_cv}(x, type = c("sd", "quantile"), ...)

\method{print}{rgcca_permutation}(x, ...)

\method{print}{rgcca_bootstrap}(
  x,
  block = seq_along(x$rgcca$call$blocks),
  comp = 1,
  type = c("weights", "loadings"),
  empirical = TRUE,
  display_order = FALSE,
  adj.method = "fdr",
  ...
)

\method{print}{rgcca_stability}(x, ...)
}
\arguments{
\item{x}{An object to be printed (output of functions \code{\link{rgcca}},
\code{\link{rgcca_cv}}, \code{\link{rgcca_permutation}},
\code{\link{rgcca_bootstrap}}, or \code{\link{rgcca_stability}}).}

\item{...}{Other parameters used in print (for the displaying of matrices).}

\item{type}{A character string indicating the type of the printed object
(see details).}

\item{block}{A numeric corresponding to the block(s) to print.}

\item{comp}{A numeric vector indicating the component(s) to consider.}

\item{empirical}{A logical value indicating if the bootstrap confidence
intervals and p-values are derived from the empirical distribution.
(default: TRUE)}

\item{display_order}{A logical value for ordering the variables. If TRUE,
variables are ordered from highest to lowest absolute value. If FALSE,
the block order is used. Default is TRUE.}

\item{adj.method}{A string indicating the method used to adjust the p-values.
It must be a method handled by the p.adjust function. Default is "fdr".}
}
\value{
none
}
\description{
`print.rgcca()` prints a fitted RGCCA object. Some information about the
model are displayed like model parameters or criterion.

`print.rgcca_cv()` prints a fitted rgcca_cv object. Parameters of the
analysis, tuning parameters and statistics for each set of
parameters are displayed.

`print.rgcca_permutation()` prints a fitted rgcca_permutation object.
Parameters of the analysis, tuning parameters and statistics for each set of
parameters are displayed.

`print.rgcca_bootstrap()` prints a fitted rgcca_bootstrap object.
Parameters of the analysis and bootstrap statistics are displayed.

`print.rgcca_stability()` calls `print.rgcca()` on the fitted RGCCA model
returned by `rgcca_stability()`.
}
\details{
Argument type can take two values in `print.cval`: \itemize{
\item "sd" (default): mean values of the cross-validated scores are reported,
as well as means plus or minus standard deviations.
\item "quantiles": median values, 25\% and 75\% quantiles of the
cross-validated scores are reported.
}

Argument type can take two values in `print.bootstrap`: \itemize{
\item "weights" (default): statistics about the block-weight vectors
are reported.
\item "loadings": statistics about the block-loading vectors are reported.
}
}
\examples{
## Printing of an rgcca object
data(Russett)
blocks <- list(
  agriculture = Russett[, seq(3)],
  industry = Russett[, 4:5],
  politic = Russett[, 6:8]
)
C <- matrix(c(0, 0, 1, 0, 0, 1, 1, 1, 0), 3, 3)
res <- rgcca(blocks,
  connection = C, ncomp = rep(2, 3), tau = c(1, 1, 1),
  scheme = "factorial", scale = TRUE, verbose = FALSE
)
print(res)

## Printing of an rgcca_cv object
res <- rgcca_cv(blocks,
  response = 3, method = "rgcca", par_type = "tau",
  par_value = c(0, 0.2, 0.3), n_run = 1, n_cores = 1,
  verbose = TRUE
)
print(res)

## Printing of an rgcca_permutation object
perm.out <- rgcca_permutation(blocks,
  par_type = "tau",
  n_perms = 5, n_cores = 1,
  verbose = TRUE
)
print(perm.out)

## Printing of an rgcca_bootstrap object
fit.rgcca <- rgcca(blocks, ncomp = c(2, 1, 2))
boot.out <- rgcca_bootstrap(fit.rgcca, n_boot = 20, n_cores = 2,
                            verbose = TRUE)
print(boot.out)

## Printing of an rgcca_stability object
fit.sgcca <- rgcca(blocks, sparsity = c(.8, .9, .6))
res <- rgcca_stability(fit.sgcca, n_boot = 10, verbose = TRUE)
print(res)
}
